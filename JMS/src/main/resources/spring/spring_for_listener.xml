<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${brokerURL}"/>
    </bean>
    import java.util.LinkedList;
    import java.util.Queue;

    public class Solution{
    public static void main(String[] args) {

    }
    }

    class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {
    }

    TreeNode(int val) {
    this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
    this.val = val;
    this.left = left;
    this.right = right;
    }
    }

    class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
    if (root == null) {
    return false;
    } else {
    Queue<TreeNode> q = new LinkedList<>();
    q.add(root);
    while (!q.isEmpty()) {
    TreeNode n = q.remove();
    if (n.val == subRoot.val) {
    if (isSame(n, subRoot)) {
    return true;
    }
    } else {
    if (n.left != null) q.add(n.left);
    if (n.right != null) q.add(n.right);
    }
    }
    return false;
    }
    }

    private boolean isSame(TreeNode n1, TreeNode n2) {
    if (n1 == null && n2 == null) {
    return true;
    } else if (n1 == null || n2 == null) {
    return false;
    } else {
    return ((n1.val == n2.val) && (isSame(n1.left, n2.left)) && (isSame(n1.right, n2.right)));
    }
    }
    }
    <context:property-placeholder location="/spring/broker.properties"/>

    <!--    Created for Spring MessageListener-->
    <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destinationName" value="${destination}"/>
        <property name="messageListener" ref="springListener"/>
    </bean>
    <bean id="springListener" class="spring.listener.SpringMessageListener"/>
</beans>